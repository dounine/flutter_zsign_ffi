// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/zsign.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlutterZsignFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterZsignFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterZsignFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> sign_ipa(
      ffi.Pointer<ffi.Char> c_ipaPath,
      ffi.Pointer<ffi.Char> c_p12Path,
      ffi.Pointer<ffi.Char> c_p12Password,
      ffi.Pointer<ffi.Char> c_mpPath,
      ffi.Pointer<ffi.Char> c_dylibFilePath,
      ffi.Pointer<ffi.Char> c_dylibPrefixPath,
      ffi.Pointer<ffi.Char> c_removeDylibPath,
      ffi.Pointer<ffi.Char> c_appName,
      ffi.Pointer<ffi.Char> c_appVersion,
      ffi.Pointer<ffi.Char> c_appBundleId,
      ffi.Pointer<ffi.Char> c_appIconPath,
      ffi.Pointer<ffi.Char> c_outputPath,
      int deletePlugIns,
      int deleteWatchPlugIns,
      int deleteDeviceSupport,
      int deleteSchemeURL,
      int enableFileAccess,
      int sign,
      int zipLevel,
      int zipIpa,
      int showLog,
      ) {
    return _sign_ipa(
      c_ipaPath,
      c_p12Path,
      c_p12Password,
      c_mpPath,
      c_dylibFilePath,
      c_dylibPrefixPath,
      c_removeDylibPath,
      c_appName,
      c_appVersion,
      c_appBundleId,
      c_appIconPath,
      c_outputPath,
      deletePlugIns,
      deleteWatchPlugIns,
      deleteDeviceSupport,
      deleteSchemeURL,
      enableFileAccess,
      sign,
      zipLevel,
      zipIpa,
      showLog,
    );
  }

  late final _sign_ipaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('sign_ipa');
  late final _sign_ipa = _sign_ipaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();
}
